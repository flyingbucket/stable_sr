sf: 4
model:
  base_learning_rate: 5.0e-05
  target: ldm.models.diffusion.ddpm_wavelet.LatentDiffusionWaveletCS
  params:
    linear_start: 0.00085
    linear_end: 0.0120
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: lq_image
    cond_stage_key: image
    # conditioning_key: concat_struct
    conditioning_key: struct_only

    image_size: 256
    channels: 4
    cond_stage_trainable: True

    monitor: val/loss_simple_ema
    scale_factor: 0.18215
    use_ema: False
    # ckpt_path: "ckpt/KL_256_e6_merge.ckpt"
    only_model: False
    learn_logvar: False
    ignore_keys:
      []
      # - "first_stage_model"
      # - "model.diffusion_model.*.attn2.to_k"
      # - "model.diffusion_model.*.attn2.to_v"

    unfrozen_first_stage: False
    unfrozen_unet: True
    unfrozen_cond_stage: True

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModelDualcondV2
      params:
        image_size: 32
        in_channels: 4
        out_channels: 4
        model_channels: 320
        attention_resolutions: [4, 2, 1]
        num_res_blocks: 2
        channel_mult: [1, 2, 4, 4]
        num_head_channels: 64
        use_spatial_transformer: False
        use_linear_in_transformer: True
        transformer_depth: 1
        # context_dim: None
        use_checkpoint: False
        legacy: False
        semb_channels: 256

    first_stage_config:
      target: ldm.models.autoencoder_plus.AutoencoderKLPlus
      params:
        ckpt_path: logs/2025-08-06T12-11-00_KLP_256/checkpoints/epoch=000017.ckpt
        embed_dim: 4
        monitor: val/rec_loss
        ddconfig:
          double_z: true
          z_channels: 4
          resolution: 256
          in_channels: 1
          out_ch: 1
          ch: 128
          ch_mult: [1, 2, 4]
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: ldm.models.cond_stage_model.WaveletBicubicResidualEncoder
      params:
        in_channels: 4
        out_channels: 256
        num_resblocks: 3
        multiscale_sizes: [128, 64, 32, 16, 8, 4]

    structcond_stage_config:
      target: ldm.modules.diffusionmodules.openaimodel.EncoderUNetModelWT
      params:
        image_size: 96
        in_channels: 4
        model_channels: 256
        out_channels: 256
        num_res_blocks: 2
        attention_resolutions: [4, 2, 1]
        dropout: 0
        channel_mult: [1, 1, 2, 2]
        conv_resample: True
        dims: 2
        use_checkpoint: False
        use_fp16: False
        num_heads: 4
        num_head_channels: -1
        num_heads_upsample: -1
        use_scale_shift_norm: False
        resblock_updown: False
        use_new_attention_order: False
        use_spatial_transformer: False

degradation:
  use_jpeg: False
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.3, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 15]
  poisson_scale_range: [0.05, 2.0]
  gray_noise_prob: 0.4
  jpeg_range: [60, 95]
  second_blur_prob: 0.5
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.6, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 12]
  poisson_scale_range2: [0.05, 1.0]
  gray_noise_prob2: 0.4
  jpeg_range2: [60, 100]
  gt_size: 256
  no_degradation_prob: 0.01

data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 18
    num_workers: 6
    wrap: false
    train:
      target: basicsr.data.wavelet_dataset.WaveletSRDataset
      params:
        image_type: ["png", "jpg", "tif", "bmd"]
        # gt_path: "/home/flyingbucket/DataStore/WHU_512"
        gt_path:
          [
            "/home/flyingbucket/DataStore/DDHRNet_DATA/korea/cloud/GF3",
            "/home/flyingbucket/DataStore/DDHRNet_DATA/shandong/GF3",
            "/home/flyingbucket/DataStore/NKU_coco/train_256",
            "/home/flyingbucket/DataStore/iceye/train_256",
            "/home/flyingbucket/DataStore/HR-SARBuD/images_256",
          ]
        crop_size: 256
        io_backend:
          type: disk
        gt_size: 256
        use_hflip: True
        use_rot: False

    validation:
      target: basicsr.data.wavelet_dataset.WaveletSRDataset
      params:
        image_type: ["png", "jpg", "tif", "bmd"]
        # gt_path: "/home/flyingbucket/DataStore/WHU_512_small"
        gt_path:
          [
            "/home/flyingbucket/DataStore/DDHRNet_DATA/korea/cloud/GF3_test",
            "/home/flyingbucket/DataStore/DDHRNet_DATA/shandong/GF3_test",
            "/home/flyingbucket/DataStore/NKU_coco/train_256_test",
            "/home/flyingbucket/DataStore/iceye/train_256_test",
            "/home/flyingbucket/DataStore/HR-SARBuD/images_256_test",
          ]
        crop_size: 256
        io_backend:
          type: disk
        gt_size: 256
        use_hflip: True
        use_rot: False

test_data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 1
    num_workers: 6
    wrap: false
    test:
      target: basicsr.data.wavelet_dataset.WaveletSRDataset
      params:
        # gt_path: "/home/flyingbucket/DataStore/WHU_512_small"
        gt_path:
          [
            "/home/flyingbucket/DataStore/DDHRNet_DATA/korea/cloud/GF3_test",
            "/home/flyingbucket/DataStore/DDHRNet_DATA/shandong/GF3_test",
            "/home/flyingbucket/DataStore/NKU_coco/train_test",
            "/home/flyingbucket/DataStore/iceye/train_256_test",
            "/home/flyingbucket/DataStore/HR-SARBuD/images_256_test",
          ]
        image_type: ["png", "jpg", "tif", "bmd"]
        crop_size: 256
        io_backend:
          type: disk
        gt_size: 256
        use_hflip: False
        use_rot: False

lightning:
  modelcheckpoint:
    params:
      every_n_epochs: 1 # 每个 epoch 保存
      save_top_k: 100
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 5000
        max_images: 4
        increase_log_steps: False

  trainer:
    gpus: [2, 3]
    benchmark: True
    max_epochs: 200 # 可选，也可以用 max_steps
    val_check_interval: 0.5 # 每个 epoch 内验证 2 次
    check_val_every_n_epoch: 1 # 每个 epoch 执行验证
    accelerator: ddp
    # accumulate_grad_batches: 1  # 可省略
